#file: noinspection YAMLSchemaValidation

# Version of config schema. The latest is "v2" for go-lanai v0.11.1+. (v0.11.0 and before only support "v1")
version: "v2"

project:
  # Name of Project/Service. Used as main.go, application.yml, bootstrap.yml, etc.
  name: opa-enabled-service
  # Golang module name, also used as base import path when in the generated source code
  module: cto-github.cisco.com/NFV-BU/go-lanai/examples/opa-enabled-service
  # Service port. Used in "bootstrap.yml"
  port: 9899
  # Service context-path. Used in "bootstrap.yml"
  context-path: /opaenabled
  # Description of the service. Used to populate "/admin/info" endpoint
  description: "OPA Enabled Service"

# Custom templates (if applicable)
#templates:
#  path: template/src

# Project Scaffolding. Defines what to generate/regenerate.
components:
  contract:
    # Path to the OpenAPI 3 Contract, in yaml format
    path: "./configs/api-docs-v3.yml"
    # Naming rules for translating OpenAPI 3 to golang
    naming:
      # Define names of regular expressions appeared in OpenAPI docs here. Otherwise, they'll have generated names.
      regular-expressions:
        exampleRegex: "^$|^[Aa][Ss][Cc]|[Dd][Ee][Ss][Cc]$"
  security:
    authn:
      # Authentication method. Currently support: oauth2 | none
      method: oauth2
    access:
      # Access preset for API & Actuator endpoints. Currently support: freestyle | opa
      preset: opa

# Regeneration config. Defines behaviours when re-run codegen on an existing project
# Supported Modes:
# - overwrite - overwrite existing file
# - ignore    - do nothing. changes are not applied
# - reference - generate a new file with `ref` suffix if the file differs
regen:
  default: ignore
  rules:
    - pattern: "pkg/api/**"
      mode: overwrite
    - pattern: "pkg/controller/**"
      mode: reference

