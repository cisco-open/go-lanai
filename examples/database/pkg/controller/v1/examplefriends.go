// Package v1 Generated by lanai-cli codegen.
// Derived from contents in openapi contract, path: /skeleton/api/v1/example/friends
package v1

import (
	"context"
	"github.com/cisco-open/go-lanai/examples/skeleton-service/pkg/api"
	apiv1 "github.com/cisco-open/go-lanai/examples/skeleton-service/pkg/api/v1"
	"github.com/cisco-open/go-lanai/examples/skeleton-service/pkg/model"
	"github.com/cisco-open/go-lanai/examples/skeleton-service/pkg/repository"
	"github.com/cisco-open/go-lanai/pkg/web"
	"github.com/cisco-open/go-lanai/pkg/web/rest"
	"go.uber.org/fx"
	"net/http"
)

type ExampleFriendsController struct {
	friendRepo *repository.FriendsRepository
}

type exampleFriendsControllerDI struct {
	fx.In
	FriendsRepo *repository.FriendsRepository
}

func NewExampleFriendsController(di exampleFriendsControllerDI) web.Controller {
	return &ExampleFriendsController{
		friendRepo: di.FriendsRepo,
	}
}

func (c *ExampleFriendsController) Mappings() []web.Mapping {
	return []web.Mapping{
		rest.
			New("example-friends-get").
			Get("/api/v1/example/friends").
			EndpointFunc(c.GetItems).
			Build(),
		rest.
			New("example-friends-post").
			Post("/api/v1/example/friends").
			EndpointFunc(c.PostItems).
			Build(),
	}
}

func (c *ExampleFriendsController) GetItems(ctx context.Context) (int, interface{}, error) {
	var friends []model.Friend
	err := c.friendRepo.FindAll(ctx, &friends)
	if err != nil {
		return 0, nil, err
	}

	resp := make([]api.ResponseItem, len(friends))
	for i := range friends {
		resp = append(resp, api.ResponseItem{
			FirstName: &friends[i].FirstName,
			LastName:  &friends[i].LastName,
		})
	}
	return 0, resp, nil
}

func (c *ExampleFriendsController) PostItems(ctx context.Context, req apiv1.PostItemsRequest) (int, interface{}, error) {

	f := &model.Friend{
		FirstName: *req.FirstName,
		LastName:  *req.LastName,
	}

	err := c.friendRepo.Save(ctx, f)

	if err != nil {
		return 0, nil, err
	}

	r := api.ResponseItem{
		FirstName: &f.FirstName,
		LastName:  &f.LastName,
	}

	return http.StatusCreated, r, nil
}
