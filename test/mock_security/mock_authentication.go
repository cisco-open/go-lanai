// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/security/ctx.go

// Package mock_security is a generated GoMock package.
package mock_security

import (
	security "cto-github.cisco.com/NFV-BU/go-lanai/pkg/security"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthentication is a mock of Authentication interface
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// Principal mocks base method
func (m *MockAuthentication) Principal() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Principal")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Principal indicates an expected call of Principal
func (mr *MockAuthenticationMockRecorder) Principal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Principal", reflect.TypeOf((*MockAuthentication)(nil).Principal))
}

// Permissions mocks base method
func (m *MockAuthentication) Permissions() security.Permissions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permissions")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Permissions indicates an expected call of Permissions
func (mr *MockAuthenticationMockRecorder) Permissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockAuthentication)(nil).Permissions))
}

// State mocks base method
func (m *MockAuthentication) State() security.AuthenticationState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(security.AuthenticationState)
	return ret0
}

// State indicates an expected call of State
func (mr *MockAuthenticationMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockAuthentication)(nil).State))
}

// Details mocks base method
func (m *MockAuthentication) Details() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Details indicates an expected call of Details
func (mr *MockAuthenticationMockRecorder) Details() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockAuthentication)(nil).Details))
}
