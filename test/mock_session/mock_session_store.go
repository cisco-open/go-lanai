// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/security/session/store.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	session "cto-github.cisco.com/NFV-BU/go-lanai/pkg/security/session"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStore) Get(id, name string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, name)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), id, name)
}

// New mocks base method
func (m *MockStore) New(name string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", name)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockStoreMockRecorder) New(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockStore)(nil).New), name)
}

// Save mocks base method
func (m *MockStore) Save(s *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStoreMockRecorder) Save(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), s)
}

// Delete mocks base method
func (m *MockStore) Delete(s *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoreMockRecorder) Delete(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), s)
}

// Options mocks base method
func (m *MockStore) Options() *session.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(*session.Options)
	return ret0
}

// Options indicates an expected call of Options
func (mr *MockStoreMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockStore)(nil).Options))
}

// AddToPrincipalIndex mocks base method
func (m *MockStore) AddToPrincipalIndex(principal string, session *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPrincipalIndex", principal, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToPrincipalIndex indicates an expected call of AddToPrincipalIndex
func (mr *MockStoreMockRecorder) AddToPrincipalIndex(principal, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPrincipalIndex", reflect.TypeOf((*MockStore)(nil).AddToPrincipalIndex), principal, session)
}

// RemoveFromPrincipalIndex mocks base method
func (m *MockStore) RemoveFromPrincipalIndex(principal string, sessions ...*session.Session) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{principal}
	for _, a := range sessions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFromPrincipalIndex", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromPrincipalIndex indicates an expected call of RemoveFromPrincipalIndex
func (mr *MockStoreMockRecorder) RemoveFromPrincipalIndex(principal interface{}, sessions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{principal}, sessions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromPrincipalIndex", reflect.TypeOf((*MockStore)(nil).RemoveFromPrincipalIndex), varargs...)
}

// FindByPrincipalName mocks base method
func (m *MockStore) FindByPrincipalName(principal, sessionName string) ([]*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPrincipalName", principal, sessionName)
	ret0, _ := ret[0].([]*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPrincipalName indicates an expected call of FindByPrincipalName
func (mr *MockStoreMockRecorder) FindByPrincipalName(principal, sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPrincipalName", reflect.TypeOf((*MockStore)(nil).FindByPrincipalName), principal, sessionName)
}

// ChangeId mocks base method
func (m *MockStore) ChangeId(s *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeId", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeId indicates an expected call of ChangeId
func (mr *MockStoreMockRecorder) ChangeId(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeId", reflect.TypeOf((*MockStore)(nil).ChangeId), s)
}
