// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	tx "cto-github.cisco.com/NFV-BU/go-lanai/pkg/data/tx"
)

// GormTxManager is an autogenerated mock type for the GormTxManager type
type GormTxManager struct {
	mock.Mock
}

// Transaction provides a mock function with given fields: ctx, _a1, opts
func (_m *GormTxManager) Transaction(ctx context.Context, _a1 tx.TxFunc, opts ...*sql.TxOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tx.TxFunc, ...*sql.TxOptions) error); ok {
		r0 = rf(ctx, _a1, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithDB provides a mock function with given fields: _a0
func (_m *GormTxManager) WithDB(_a0 *gorm.DB) tx.GormTxManager {
	ret := _m.Called(_a0)

	var r0 tx.GormTxManager
	if rf, ok := ret.Get(0).(func(*gorm.DB) tx.GormTxManager); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tx.GormTxManager)
		}
	}

	return r0
}
