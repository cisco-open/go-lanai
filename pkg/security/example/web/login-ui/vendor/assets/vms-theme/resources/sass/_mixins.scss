/*!
 * Copyright (c) 2015 Cisco and/or its affiliates.
 *
 * PROPRIETARY AND CONFIDENTIAL -ALL USE MUST BE LICENSED
 *
 * The code, technical concepts, all information contained herein and related
 * documentation are the property of, proprietary to and are vested in Cisco
 * Technology, Inc. and/or its affiliated entities, ("Cisco") under various
 * laws including copyright, international treaties, patent, trade secret
 * and/or contract. Any copying, dissemination, reverse engineering, disclosure
 * or other use of the material contained herein without an express license
 * from Cisco is prohibited and, among other legal consequences, constitutes an
 * infringement of the intellectual property and the proprietary rights of
 * Cisco. All use of the material herein must be in strict accordance with the
 * terms of the license you have entered into with Cisco.
 *
 */

//===================================================================================
// Border radius
//===================================================================================
@mixin borderRadius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
    border-radius: $radius;
}
//===================================================================================
// Box shadow
//===================================================================================
@mixin boxShadow($h, $v, $blur, $color) {
    -webkit-box-shadow: $h $v $blur $color;
    -moz-box-shadow: $h $v $blur $color;
    -ms-box-shadow: $h $v $blur $color;
    -o-box-shadow: $h $v $blur $color;
    box-shadow: $h $v $blur $color;
}

//===================================================================================
// Filter mixin
//===================================================================================
@mixin transform($property...) {
    -webkit-transform: $property;
    -moz-transform: $property;
    -o-transform: $property;
    -ms-transform: $property;
    transform: $property;
}

//===================================================================================
// Put in the center of parent container (needs parent's position: relative)
//===================================================================================
@mixin center {
    position: absolute;
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
}

//===================================================================================
// Opacity mixin
//===================================================================================
@mixin opacity($value) {
    $IEValue: $value*100;
    opacity: $value;
    -webkit-opacity: $value;
    -moz-opacity: $value;
    -o-oapacity: $value;
    -ms-opacity: $value;
    -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity='+$IEValue+')';
    filter: alpha(opacity=$IEValue);
}

//===================================================================================
// Filter mixin
//===================================================================================
@mixin filter($property...) {
    -webkit-filter: $property;
    -moz-filter: $property;
    -o-filter: $property;
    -ms-filter: $property;
    filter: $property;
}

//===================================================================================
// Keyframes mixin
//===================================================================================
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

//===================================================================================
// Animation
//===================================================================================
@mixin animation($property...) {
    -webkit-animation: $property;
    -moz-animation: $property;
    -ms-animation: $property;
    -o-animation: $property;
    animation: $property;
}
//===================================================================================
// Transition
//===================================================================================
@mixin transition($property...) {
    -webkit-transition: $property;
    -moz-transition: $property;
    -ms-transition: $property;
    -o-transition: $property;
    transition: $property;
}

@mixin transform($property...) {
    -webkit-transform: $property;
    -moz-transform: $property;
    -o-transform: $property;
    -ms-transform: $property;
    transform: $property;
}

@mixin transformOrigin($style) {
    -webkit-transform-origin: $style;
    -moz-transform-origin: $style;
    -ms-transform-origin: $style;
    -o-transform-origin: $style;
    transform-origin: $style;
}
@mixin perspective($distance) {
    -webkit-perspective: $distance;
    -moz-perspective: $distance;
    -ms-perspective: $distance;
    -o-perspective: $distance;
    perspective: $distance;
}
@mixin triangle($size, $color) {
    width: 0;
    height: 0;
    border-style: solid;
    border-width: $size $size 0;
    border-color: $color transparent transparent transparent;
}
@mixin userSelect($param) {
    -webkit-user-select: $param;
    -moz-user-select: $param;
    -ms-user-select: $param;
    -o-user-select: $param;
    user-select: $param;
}

@mixin pointEvent($param) {
    -webkit-pointer-events: $param;
    -moz-pointer-events: $param;
    -ms-pointer-events: $param;
    -o-pointer-events: $param;
    pointer-events: $param;

    /* Workaround for IE10 */
    background: none !important;
}

/**
 *  Multi browser linear-gradient
 *  [source] http://codeboxers.com/straight-sass-gradient-mixin/
 *
 *  [usage]
 *    @include linear-gradient(rgba(149,149,149,1), #BADA55);
 *    @include linear-gradient(transparent, #BADA55); // does not include any styles
 */
@mixin linear-gradient($fromColor, $toColor) {
    @if $fromColor != transparent and $toColor != transparent {
        background-color: $toColor; /* Fallback Color */
        background-image: -webkit-gradient(
            linear,
            left top,
            left bottom,
            from($fromColor),
            to($toColor)
        ); /* Saf4+, Chrome */
        background-image: -webkit-linear-gradient(
            top,
            $fromColor,
            $toColor
        ); /* Chrome 10+, Saf5.1+, iOS 5+ */
        background-image: -moz-linear-gradient(
            top,
            $fromColor,
            $toColor
        ); /* FF3.6 */
        background-image: -ms-linear-gradient(
            top,
            $fromColor,
            $toColor
        ); /* IE10 */
        background-image: -o-linear-gradient(
            top,
            $fromColor,
            $toColor
        ); /* Opera 11.10+ */
        background-image: linear-gradient(top, $fromColor, $toColor);
        filter: progid:DXImageTransform.Microsoft.gradient(
                GradientType=0,
                StartColorStr='#{$fromColor}',
                EndColorStr='#{$toColor}'
            );
    }
}

@mixin radial-gradient($fromColor, $toColor) {
    @if $fromColor != transparent and $toColor != transparent {
        background-color: $toColor; /* Fallback Color */
        background-image: -webkit-gradient(
            radial,
            from($fromColor),
            to($toColor)
        ); /* Saf4+, Chrome */
        background-image: -webkit-radial-gradient(
            $fromColor,
            $toColor
        ); /* Chrome 10+, Saf5.1+, iOS 5+ */
        background-image: -moz-radial-gradient(
            $fromColor,
            $toColor
        ); /* FF3.6 */
        background-image: -ms-radial-gradient($fromColor, $toColor); /* IE10 */
        background-image: -o-radial-gradient(
            $fromColor,
            $toColor
        ); /* Opera 11.10+ */
        background-image: radial-gradient($fromColor, $toColor);
        filter: progid:DXImageTransform.Microsoft.gradient(
                GradientType=1,
                StartColorStr='#{$fromColor}',
                EndColorStr='#{$toColor}'
            );
    }
}

/**
 *  Join the transition "style" to parent selector
 *
 *  [usage]
 *    @include append-transition(linear);
 */
@mixin append-transition($style, $duration: 0.7s, $which: all, $delay: 0s) {
    &.#{$style} {
        @include transition($style, $duration, $which, $delay);
    }
}

/**
 *  Transforms the selector to it's mirror
 *  [source] http://stackoverflow.com/questions/5406368/can-you-use-css-to-mirror-flip-text
 *
 *  [usage]
 *    @include transform-mirror();
 */
@mixin transform-mirror() {
    -webkit-transform: rotateY(180deg);
    -moz-transform: rotateY(180deg);
    -o-transform: rotateY(180deg);
    -ms-transform: rotateY(180deg);
    unicode-bidi: bidi-override;
    direction: rtl;
}

/**
* Adds a box shadow a selector
* [source] https://gist.github.com/garyharan/957284
*
* [usage]
*   @include box-shadow(0, 0, 1px, red)
*/
@mixin box-shadow($hShadow, $vShadow:0, $blur: 5px, $spread: 1px, $color: #CCC, $inset: false) {
    @if $hShadow == none {
        -webkit-box-shadow: none;
        -moz-box-shadow: none;
        -ms-box-shadow: none;
        -o-box-shadow: none;
        box-shadow: none;
    } @else {
        @if $inset {
            -webkit-box-shadow: inset $hShadow $vShadow $blur $spread $color;
            -ms-box-shadow: inset $hShadow $vShadow $blur $spread $color;
            -o-box-shadow: inset $hShadow $vShadow $blur $spread $color;
            -moz-box-shadow: inset $hShadow $vShadow $blur $spread $color;
            box-shadow: inset $hShadow $vShadow $blur $spread $color;
        } @else {
            -webkit-box-shadow: $hShadow $vShadow $blur $spread $color;
            -ms-box-shadow: $hShadow $vShadow $blur $spread $color;
            -o-box-shadow: $hShadow $vShadow $blur $spread $color;
            -moz-box-shadow: $hShadow $vShadow $blur $spread $color;
            box-shadow: $hShadow $vShadow $blur $spread $color;
        }
    }
}

/**
* [source]
*   https://github.com/jxnblk/loading
*   https://github.com/jxnblk/loading/blob/master/loading-spinning-bubbles.svg
*
* [usage]
*   @include svg-spinner(32px);
*/
@mixin svg-spinner($size: 64px) {
    display: block;
    width: $size;
    height: $size;
    background-image: url('../images/shared/spinner.svg');
    background-size: $size $size;
    background-color: $primary-color;

    &.vms-spinner {
        width: $size;
        height: $size;
    }
}

/**
* [source]
*   http://codepen.io/sawmac/pen/qGudy
*
* [usage]
*   @include transform(translate(-100%, 100%))
*/
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

/**
 * [source]
 *   https://github.com/mastastealth/sass-flex-mixin/blob/master/flex.scss
 *
 * [usage]
 *   @include flexbox()
 */
@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

/**
 *  Join the transition "style" to parent selector
 *
 *  [usage]
 *    @include append-transition(linear);
 */
@mixin unselectable() {
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    -o-user-select: none;
    user-select: none;
}

/*
 *  Adds calc to a selector
 */
//[usage] @include calc("width", "100% - #{$customer-header-width}");

@mixin calc($key, $value) {
    #{$key}: -webkit-calc(#{$value});
    #{$key}: -moz-calc(#{$value});
    #{$key}: calc(#{$value});
}

/**
 * Hides scrollbar on a scrollable element
 */
@mixin hide-scrollbar {
    &::-webkit-scrollbar {
        width: 0 !important;
    }
    -ms-overflow-style: none;
    overflow: -moz-scrollbars-none;
}
