// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	security "cto-github.cisco.com/NFV-BU/go-lanai/pkg/security"
)

// ConditionalLogoutHandler is an autogenerated mock type for the ConditionalLogoutHandler type
type ConditionalLogoutHandler struct {
	mock.Mock
}

// ShouldLogout provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ConditionalLogoutHandler) ShouldLogout(_a0 context.Context, _a1 *http.Request, _a2 http.ResponseWriter, _a3 security.Authentication) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request, http.ResponseWriter, security.Authentication) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConditionalLogoutHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewConditionalLogoutHandler creates a new instance of ConditionalLogoutHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConditionalLogoutHandler(t mockConstructorTestingTNewConditionalLogoutHandler) *ConditionalLogoutHandler {
	mock := &ConditionalLogoutHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
