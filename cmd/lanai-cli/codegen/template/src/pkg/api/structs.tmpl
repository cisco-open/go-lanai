{{ define "SchemaProperties" }}
    {{- $schema := index . 0 -}}
    {{- $currentPkg := index . 1 }}
    {{- range $i, $schemaRef := $schema.AllSchemaRefs }}
        {{- with $schemaRef.Ref }}
            {{ template "EmbedStruct" args . $currentPkg }}
        {{- else }}
            {{- $innerSchema := schema $schema.Name $schemaRef }}
            {{- template "propertiesFromSchema" args $innerSchema $currentPkg}}
            {{- template "additionalProperties" args $innerSchema $currentPkg}}
        {{- end }}
    {{- end }}
{{- end }}

{{ define "additionalProperties" }}
    {{- $schema := index . 0 }}
    {{- $currentPkg := index . 1 }}
    {{- if $schema.HasAdditionalProperties  }}
        {{- $additionalPropertyType := "" }}
        {{- with $schema.Data.Value.AdditionalProperties }}
            {{- $property := property . "" nil }}
            {{- $additionalPropertyType = propertyToGoType $property $currentPkg}}
        {{- end }}
        {{- if eq $additionalPropertyType "" }}
            {{- $additionalPropertyType = "interface{}" }}
        {{- end }}
        Values map[string]{{ $additionalPropertyType }} `json:"-"`
    {{- end }}
{{- end }}

{{ define "propertiesFromSchema" }}
    {{- $schema := index . 0 }}
    {{- $currentPkg := index . 1 }}
    {{- $requiredList := requiredList $schema.Data }}
    {{- range $propName, $prop := $schema.AllProperties }}
        {{- $property := property $prop $propName $requiredList $schema.Name }}
        {{ template "properties" args $property $currentPkg}}
    {{- end }}
{{- end }}

{{ define "properties" }}
   {{- $property := index . 0 }}
   {{- $currentPkg := index . 1 }}
   {{- toTitle $property.PropertyName }} {{ template "pointer" args $property }}{{ propertyToGoType $property $currentPkg}} {{ structTags $property}}
{{- end }}

{{ define "pointer" }}
   {{- $property := index . 0 }}
   {{- if shouldHavePointer $property }} * {{- end }}
{{- end }}

{{ define "EmbedStruct" }}
    {{- $ref := index . 0 }}
    {{- $structName := basePath $ref }}
    {{- $structName = toTitle $structName }}
    {{- $structLocation := structLocation $structName }}

    {{- $currentPkg := index . 1 }}
    {{- $pkgName := basePath $structLocation }}
    {{- /* Don't put prefix if the current package is the same location as where the struct is from */ -}}
    {{- with ne $currentPkg $structLocation }}{{ $pkgName }}.{{ end }}{{ toTitle $structName }}
{{- end }}

{{ define "ParameterProperty" }}
    {{- $parameter := index . 0 }}
    {{- $currentPkg := index . 1 }}

    {{- $isRef := $parameter.Ref }}
    {{- $isObject := eq $parameter.Value.Schema.Value.Type "object" }}
    {{- $shouldEmbed := and $isRef $isObject }}
    {{- with $shouldEmbed }}
        {{- template "EmbedStruct" args . $currentPkg }}
    {{- else }}
        {{- $requiredList := requiredList $parameter.Value }}
        {{- $property := property $parameter.Value $parameter.Value.Name $requiredList }}
        {{- template "properties" args $property $currentPkg}}
    {{- end }}
{{- end }}
