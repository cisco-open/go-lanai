{{- $rootData := . }}
{{- $pathName := index . "PathName" }}
{{- $pathData := index . "PathData" }}
{{- $version := index . "Version" }}
{{- $repository := index . "Repository" }}
// Package {{ $version }} Generated by lanai_cli codegen. DO NOT EDIT
// Derived from contents in openapi contract, path: {{ $pathName }}
package {{ $version }}

import (
	"context"
	"cto-github.cisco.com/NFV-BU/go-lanai/pkg/web"
    "cto-github.cisco.com/NFV-BU/go-lanai/pkg/web/rest"
    {{- template "controllerImports" $rootData -}}
	"go.uber.org/fx"
)

{{- $nameFromPath := defaultNameFromPath $pathName }}
{{- $controllerName := concat $nameFromPath "Controller" | toTitle }}

{{- $diName := concat $nameFromPath "Controller" "DI" }}

type {{ $controllerName }} struct {}

type {{ $diName }} struct {
    fx.In
}

func New{{ $controllerName }}(di {{ $diName }}) web.Controller {
    return &{{$controllerName }}{}
}

{{ template "mappingFunction" args $rootData }}

{{ template "controllerFunctions" args . }}

{{ define "controllerImports" }}
    {{- $pathName := index . "PathName" | defaultNameFromPath }}
    {{- $pathData := index . "PathData" }}
    {{- $repository := index . "Repository" }}
    {{- $version := index . "Version" }}

    {{- $hasCommonImport := false }}
    {{- $hasAPIImport := false }}
    {{- range $opName, $opData := pathOperations $pathData }}
        {{- $structRegistry := structRegistry }}
        {{- $operation := concat $pathName $opName | operation $opData }}

        {{- $requestStruct := $operation.StructForMessage "Request" $structRegistry }}
        {{- if eq $requestStruct.Import "pkg/api"  }}
            {{- $hasCommonImport = true }}
        {{- else if $requestStruct.Import }}
            {{- $hasAPIImport = true }}
        {{- end }}
        
    {{- end }}
    {{- template "ImportStruct" args $hasCommonImport $hasAPIImport . -}}
{{ end }}

{{ define "mappingFunction" }}
    {{- $rootData := index . 0 }}

    {{- $pathName := index $rootData "PathName" }}
    {{- $nameFromPath := defaultNameFromPath $pathName }}

    {{- $controllerName := concat $nameFromPath "Controller" | toTitle}}
    {{- $pathData := index $rootData "PathData" }}
    {{- $pathName := index $rootData "PathName" }}
    func (c * {{ $controllerName }} ) Mappings() []web.Mapping {
        return []web.Mapping{
        {{- with $pathData }}
            {{- range $opName, $opData := pathOperations . }}
                {{- $operation :=  concat $nameFromPath $opName | operation $opData }}
            rest.
                New("{{ mappingName $pathName $opName }}").
                {{$opName}}("{{ mappingPath $pathName }}").
                EndpointFunc(c.{{toTitle $operation.Name}}).
                Build(),
            {{- end }}
        {{- end }}
        }
    }
{{- end }}

{{ define "controllerFunctions" }}
    {{- $rootData := index . 0 }}
    {{- $pathData := index $rootData "PathData" }}

    {{- $pathName := index $rootData "PathName" }}
    {{- $nameFromPath := defaultNameFromPath $pathName }}

    {{- $controllerName := concat $nameFromPath "Controller" | toTitle}}

    {{- range $opName, $opData := pathOperations $pathData }}
        {{- $operation := concat $nameFromPath $opName | operation $opData }}

        {{- $requestStructName := concat $operation.Name "Request" }}
        {{- $importName := structLocation $requestStructName }}
        {{- /* No Import Name - struct doesn't exist - it's probably from common.go */ -}}
        {{- if not $importName }}
            {{- $singularRef := "" }}
            {{- range $operation.Data.Parameters }}
                    {{- if .Ref }}
                        {{- $singularRef = .Ref }}
                        {{- break -}}
                    {{- end }}
            {{- end }}
            {{- if not $singularRef }}
                {{- if $operation.Data.RequestBody.Ref }}
                    {{- $singularRef = $operation.Data.RequestBody.Ref }}
                {{- else if $operation.Data.RequestBody.Value.Content }}
                   {{- range $operation.Data.RequestBody.Value.Content }}
                        {{- if .Schema.Ref }}
                            {{- $singularRef = .Schema.Ref }}
                            {{- break -}}
                        {{- end }}
                    {{- end }}
                {{- end }}
            {{- end }}

            {{- $requestStructName = basePath $singularRef }}
            {{- $importName = structLocation $requestStructName }}
            {{- $importName = basePath $importName }}
        {{- else }}
            {{- $importName = basePath $importName }}
            {{- $importName = concat "api" $importName}}
        {{- end }}

        {{ $defaultResponse := "" }}
        {{ range $respName, $respData := $operation.Data.Responses }}
            {{ $defaultResponse = $respName}}
            {{ break }}
        {{- end }}
        {{- $defaultResponseIs200 := eq $defaultResponse "200"}}
        {{- $noResponses := not $operation.Data.Responses }}
        {{- $hideStatus := or $noResponses $defaultResponseIs200 }}
        func (c * {{ $controllerName }}) {{toTitle $operation.Name}}(ctx context.Context, req {{$importName}}.{{toTitle $requestStructName}}) ({{if not $hideStatus}} int, {{- end }}interface{}, error) {
            {{- /* CODEGEN TODO: populate function logic (PLAT-1688) */ -}}
            return {{if not $hideStatus}} 501, {{- end }}nil, nil
        }

    {{- end }}
{{- end }}
