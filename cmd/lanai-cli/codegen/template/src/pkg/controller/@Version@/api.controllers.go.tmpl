{{- $rootData := . }}
{{- $pathName := index . "PathName" }}
{{- $pathData := index . "PathData" }}
{{- $version := index . "Version" }}
{{- $repository := index . "Repository" }}
// Package {{ $version }} Generated by lanai_cli codegen.
// Derived from contents in openapi contract, path: {{ $pathName }}
package {{ $version }}

{{ $imports := NewImports }}
{{ $imports = $imports.Add "context" }}
{{ $imports = $imports.Add "cto-github.cisco.com/NFV-BU/go-lanai/pkg/web" }}
{{ $imports = $imports.Add "cto-github.cisco.com/NFV-BU/go-lanai/pkg/web/rest" }}
{{- template "controllerImports" args $rootData $imports -}}
{{ $imports = $imports.Add "go.uber.org/fx" }}
{{ template "imports" $imports }}

{{- $nameFromPath := defaultNameFromPath $pathName }}
{{- $controllerName := concat $nameFromPath "Controller" | toTitle }}

{{- $diName := concat $nameFromPath "Controller" "DI" }}

type {{ $controllerName }} struct {}

type {{ $diName }} struct {
    fx.In
}

func New{{ $controllerName }}(di {{ $diName }}) web.Controller {
    return &{{$controllerName }}{}
}

{{ template "mappingFunction" args $rootData }}

{{ template "controllerFunctions" args . }}

{{ define "controllerImports" }}
    {{- $rootData := index . 0 }}
    {{- $imports := index . 1 }}
    {{- $pathName := index $rootData "PathName" | defaultNameFromPath }}
    {{- $pathData := index $rootData "PathData" }}
    {{- $repository := index $rootData "Repository" }}
    {{- $version := index $rootData "Version" }}

    {{- $hasCommonImport := false }}
    {{- $hasAPIImport := false }}
    {{- range $opName, $opData := $pathData.Operations  }}
        {{- $operation := concat $pathName $opName | operation $opData }}

        {{- $requestStruct := $operation.RequestStruct structRegistry }}
        {{- if $requestStruct }}
            {{- if eq $requestStruct.Package "pkg/api"  }}
                {{- $hasCommonImport = true }}
            {{- else if $requestStruct.Package }}
                {{- $hasAPIImport = true }}
            {{- end }}
        {{- end }}

        {{- $responseStruct := $operation.ResponseStruct structRegistry }}
        {{- if $responseStruct }}
            {{- log $responseStruct.Package }}
            {{- if eq $responseStruct.Package "pkg/api"  }}
                {{- $hasCommonImport = true }}
            {{- else if $responseStruct.Package }}
                {{- $hasAPIImport = true }}
            {{- end }}
        {{- end }}
    {{- end }}

    {{- $repository := index $rootData "Repository" }}
    {{- $version := index $rootData "Version" }}
    {{- $commonImport := concat $repository "/pkg/api" }}
    {{- $apiImport := concat $repository "/pkg/api/" $version }}
    {{- $apiImportAlias := concat "api" $version }}
    {{- /* It's like this because of weird new-line issues */ -}}
    {{- if and $hasCommonImport $hasAPIImport }}
        {{ $imports = $imports.Add $commonImport }}
        {{ $imports = $imports.AddWithAlias $apiImport $apiImportAlias }}
    {{- else if $hasCommonImport}}
        {{ $imports = $imports.Add $commonImport }}
    {{- else if $hasAPIImport }}
        {{ $imports = $imports.AddWithAlias $apiImport $apiImportAlias }}
    {{- end }}
{{ end }}

{{ define "mappingFunction" }}
    {{- $rootData := index . 0 }}

    {{- $pathName := index $rootData "PathName" }}
    {{- $nameFromPath := defaultNameFromPath $pathName }}

    {{- $controllerName := concat $nameFromPath "Controller" | toTitle}}
    {{- $pathData := index $rootData "PathData" }}
    {{- $pathName := index $rootData "PathName" }}
    func (c * {{ $controllerName }} ) Mappings() []web.Mapping {
        return []web.Mapping{
        {{- with $pathData }}
            {{- range $opName, $opData := .Operations }}
                {{- $opName = toLower $opName | toTitle }}
                {{- $operation := $opName | concat $nameFromPath | operation $opData }}
            rest.
                New("{{ mappingName $pathName $opName }}").
                {{$opName}}("{{ mappingPath $pathName }}").
                EndpointFunc(c.{{toTitle $operation.Name}}).
                Build(),
            {{- end }}
        {{- end }}
        }
    }
{{- end }}

{{ define "controllerFunctions" }}
    {{- $rootData := index . 0 }}
    {{- $pathData := index $rootData "PathData" }}

    {{- $pathName := index $rootData "PathName" }}
    {{- $nameFromPath := defaultNameFromPath $pathName }}

    {{- $controllerName := concat $nameFromPath "Controller" | toTitle}}

    {{- range $opName, $opData := $pathData.Operations }}
        {{- $operation := toLower $opName | toTitle | concat $nameFromPath | operation $opData }}

        {{ $defaultResponse := "" }}
        {{ range $respName, $respData := $operation.Data.Responses }}
            {{ $defaultResponse = $respName}}
            {{- break -}}
        {{- end }}
        {{- $defaultResponseIs200 := eq $defaultResponse "200"}}
        {{- $noResponses := not $operation.Data.Responses }}
        {{- $hideStatus := or $noResponses $defaultResponseIs200 }}
        func (c * {{ $controllerName }}) {{ template "controllerFuncArguments" args $operation}} {{template "controllerFuncReturnType" args $hideStatus $operation}} {
            return {{if not $hideStatus}} 501, {{- end }}{{- template "responseBodyDefaultValue" args $hideStatus $operation}}, nil
        }

    {{- end }}
{{- end }}

{{ define "controllerFuncArguments" }}
    {{- $operation := index . 0 }}
    {{- $requestStruct := $operation.RequestStruct structRegistry}}
    {{- $type := "" }}
    {{- $import := "" }}
    {{- if $requestStruct }}
        {{- $type = toTitle $requestStruct.Name }}
        {{- $import = basePath $requestStruct.Package }}
        {{- if ne $import "api" }} {{- $import = concat "api" $import }} {{- end }}
    {{- end }}
    {{- toTitle $operation.Name -}}(ctx context.Context{{ if $type }}, req {{basePath $import}}.{{$type}}{{- end}})
{{- end }}

{{ define "controllerFuncReturnType" }}
    {{- $hideStatus := index . 0 -}}
    {{- $operation := index . 1 }}

    {{- $import := "" }}
    {{- $type := "" }}
    {{- $responseStruct := $operation.ResponseStruct structRegistry -}}
    {{- if $responseStruct }}
        {{- $type = toTitle $responseStruct.Name }}
        {{- $import = basePath $responseStruct.Package }}
        {{- if ne $import "api" }} {{- $import = concat "api" $import }} {{- end }}
    {{- end }}

    {{- $pointer := "" }}
    {{- if $import }}
        {{- $pointer = "*" }}
    {{- else }}
        {{- /*If this is an array of an object, add a pointer to the array, otherwise just return an array of the type */ -}}
        {{- range $i, $content := $operation.AllResponseContent }}
            {{- $isNotObject := ne $content.Schema.Value.Type "object" }}
            {{- $isNotArray := ne $content.Schema.Value.Type "array" }}
            {{- $isBaseType := and $isNotObject $isNotArray }}
            {{- if $isBaseType}}
                {{- $type = schemaToText $content.Schema "" "" }}
            {{- end }}
            {{- break }}
        {{- end }}
    {{- end -}}

({{if not $hideStatus}} int, {{- end }}{{$pointer}}{{with $import}}{{.}}.{{ end }}{{with $type}}{{.}}{{else}}interface{}{{end}}, error)
{{- end }}

{{ define "responseBodyDefaultValue" -}}
    {{- $hideStatus := index . 0 -}}
    {{- $operation := index . 1 }}

    {{- $import := "" }}
    {{- $type := "" }}
    {{- $responseStruct := $operation.StructForMessage "Response" structRegistry -}}
    {{- if $responseStruct }}
        {{- $import = basePath $responseStruct.Package }}
        {{- $type = toTitle $responseStruct.Name }}
        {{- if ne $import "api" }} {{- $import = concat "api" $import }} {{- end }}
    {{- end -}}

    {{ if $import -}}
        &{{$import}}.{{$type}}{}
    {{- else -}}
       {{- range $i, $content := $operation.AllResponseContent }}
            {{- $type = $content.Schema.Value.Type }}
            {{- break }}
        {{- end }}
        {{- $defaultValue := "nil" }}
        {{- if eq $type "string" -}}
            {{- $defaultValue = "\"\"" }}
        {{- else if eq $type "integer" }}
            {{- $defaultValue = "0" }}
        {{- else if eq $type "number" }}
            {{- $defaultValue = "0.0" }}
        {{- else if eq $type "boolean" }}
            {{- $defaultValue = "false" }}
        {{- end }}

        {{- $defaultValue -}}
    {{- end -}}
{{- end }}