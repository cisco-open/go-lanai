package controller

import (
	"cto-github.cisco.com/NFV-BU/go-lanai/pkg/bootstrap"
	"cto-github.cisco.com/NFV-BU/go-lanai/pkg/utils/validation"
	"cto-github.cisco.com/NFV-BU/go-lanai/pkg/web"
	"github.com/go-playground/validator/v10/non-standard/validators"
	"go.uber.org/fx"
)

func Use() {
	bootstrap.AddOptions(
		fx.Invoke(register),
	)
}
{{ with index . "OpenAPIData" }}
func register(lc fx.Lifecycle, r *web.Registrar) {
	// validation, note, related validation translations are registered in errorhandling package
	_ = web.Validator().RegisterValidation("notblank", validators.NotBlank)
	_ = web.Validator().RegisterValidation("enumof", validation.CaseInsensitiveOneOf())
    {{- range .Components.Schemas }}
        {{- range .Value.Properties }}
                {{- template "registerValidation" . }}
         {{- end}}
    {{- end }}
    {{- range .Paths }}
        {{- template "registerRequestParameterValidation" .Get}}
        {{- template "registerRequestParameterValidation" .Delete}}
        {{- template "registerRequestParameterValidation" .Post}}
        {{- template "registerRequestParameterValidation" .Patch}}
        {{- template "registerRequestParameterValidation" .Put}}
        {{- template "registerRequestParameterValidation" .Connect}}
        {{- template "registerRequestParameterValidation" .Head}}
        {{- template "registerRequestParameterValidation" .Options}}
        {{- template "registerRequestParameterValidation" .Trace}}
    {{- end }}
}
{{end}}
{{- define "registerRequestParameterValidation" }}
    {{- if . }}
        {{- range .Parameters }}
            {{- with .Value.Schema }}
                {{- template "registerValidation" . }}
            {{- end }}
        {{- end }}
    {{- end}}
{{- end }}

{{- define "registerValidation" }}
    {{- if isString .Value }} {{- with $regex := registerRegex .Value }}
        _ = web.Validator().RegisterValidationCtx("{{getRegexName .}}", validation.Regex("{{.}}"))
    {{- end}} {{- end}}
{{- end }}
