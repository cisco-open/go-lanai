{{- $repository := index . "Repository" }}
{{ with index . "OpenAPIData" }}
{{- $versionList := versionList .Paths }}
// Package controller Generated by lanai_cli codegen. DO NOT EDIT
package controller


{{ $imports := NewImports }}
{{ $imports = $imports.Add "cto-github.cisco.com/NFV-BU/go-lanai/pkg/bootstrap" }}
{{ $imports = $imports.Add "cto-github.cisco.com/NFV-BU/go-lanai/pkg/utils/validation" }}
{{ $imports = $imports.Add "cto-github.cisco.com/NFV-BU/go-lanai/pkg/web" }}
{{- range $versionList }}
    {{- $path := concat $repository "/pkg/controller/" .  }}
    {{- $alias := concat "controller" . }}
    {{ $imports = $imports.AddWithAlias $path $alias }}
{{- end }}
{{ $imports = $imports.Add "github.com/go-playground/validator/v10/non-standard/validators" }}
{{ $imports = $imports.Add "go.uber.org/fx" }}
{{ template "imports" $imports }}

func Use() {
	{{- range $versionList }}
	 bootstrap.Register(controller{{ . }}.Module)
	{{- end }}
	bootstrap.AddOptions(
		fx.Invoke(register),
	)
}

func register(lc fx.Lifecycle, r *web.Registrar) {
	// validation, note, related validation translations are registered in errorhandling package
	_ = web.Validator().RegisterValidation("notblank", validators.NotBlank)
	_ = web.Validator().RegisterValidation("enumof", validation.CaseInsensitiveOneOf())
    {{- range .Components.Schemas }}
        {{- $schema := schema "" . }}
        {{- range $schema.AllSchemas }}
            {{- $s := schema "" . }}
            {{- range $s.Data.Value.Properties }}
                    {{- template "registerValidation" . }}
             {{- end}}
        {{- end }}
    {{- end }}
    {{- range .Paths }}
        {{- template "registerRequestParameterValidation" .Get}}
        {{- template "registerRequestParameterValidation" .Delete}}
        {{- template "registerRequestParameterValidation" .Post}}
        {{- template "registerRequestParameterValidation" .Patch}}
        {{- template "registerRequestParameterValidation" .Put}}
        {{- template "registerRequestParameterValidation" .Connect}}
        {{- template "registerRequestParameterValidation" .Head}}
        {{- template "registerRequestParameterValidation" .Options}}
        {{- template "registerRequestParameterValidation" .Trace}}
    {{- end }}
}
{{end}}
{{- define "registerRequestParameterValidation" }}
    {{- if . }}
        {{- range .Parameters }}
            {{- with .Value.Schema }}
                {{- template "registerValidation" . }}
            {{- end }}
        {{- end }}
    {{- end}}
{{- end }}

{{- define "registerValidation" }}
    {{- if eq .Value.Type "string" }}
        {{- if registerRegex .Value }}
        {{- with regex .Value }}
        _ = web.Validator().RegisterValidationCtx("{{ .Name }}", validation.Regex("{{ .Value }}"))
        {{- end}} {{- end}}
    {{- end }}
{{- end }}
